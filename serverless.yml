service: exquisite-corpse
frameworkVersion: '3'

plugins:
  - serverless-dynamodb-local
  - serverless-s3-local
  - serverless-offline-sqs
  - serverless-offline
  - serverless-python-requirements

custom:
  dynamodb:
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      migrate: true
    # Comment if you don't have a DynamoDB running locally
      noStart: true
    migration:
      dir: offline/migrations
  s3:
    host: localhost
    directory: ./tmp
    cors: offline/cors.xml
    allowMismatchedSignatures: true

  serverless-offline-sqs:
    autoCreate: true
    apiVersion: "2012-11-05"
    endpoint: http://0.0.0.0:9324
    region: us-east-1
    skipCacheInvalidation: false

  pythonRequirements:
    dockerizePip: non-Linux

package:
  patterns:
    - '!elasticMQ/**'
    - '!dynamodb_local/**'
    - '!offline/**'
    - '!tmp/**'
    - '!venv/**'
    - '!.pytest_cache/**'

provider:
  name: aws
  runtime: nodejs12.x
  environment:
    SQS_DRAWING_QUEUE: 'drawings-${sls:stage}'
    DYNAMODB_TABLE: 'drawings-${sls:stage}'
    S3_SEGMENT_BUCKET: '${self:service}-segments'
    S3_DRAWING_BUCKET: "${self:service}-drawings"
  httpApi:
    cors: true
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"
        - Effect: Allow
          Action:
            - s3:GetObject
            - s3:PutObject
            - s3:PutObjectAcl
          Resource: "arn:aws:s3:::${self:provider.environment.S3_SEGMENT_BUCKET}/*"
        - Effect: Allow
          Action:
            - s3:GetObject
            - s3:PutObject
            - s3:PutObjectAcl
          Resource: "arn:aws:s3:::${self:provider.environment.S3_DRAWING_BUCKET}/*"
        - Effect: Allow
          Action:
            - SQS:SendMessage
            - SQS:DeleteMessage
            - SQS:ReceiveMessage
            - SQS:GetQueueUrl
            - SQS:ListQueues
          Resource: "arn:aws:sqs:${aws:region}:*:${self:provider.environment.SQS_DRAWING_QUEUE}"

functions:
  # =================================================================
  # TODO API
  # =================================================================
  create:
    handler: drawings/create.create
    events:
      - httpApi:
          path: /drawings
          method: post

  list:
    handler: drawings/list.list
    events:
      - httpApi:
          path: /drawings
          method: get

  get:
    handler: drawings/get.get
    events:
      - httpApi:
          path: /drawings/{id}
          method: get

  update:
    handler: drawings/update.update
    events:
      - httpApi:
          path: /drawings/{id}
          method: put

  delete:
    handler: drawings/delete.delete
    events:
      - httpApi:
          path: /drawings/{id}
          method: delete

  # =================================================================
  # Segment API
  # =================================================================
  initiate-upload:
    handler: segments/initiate-upload.initiate
    events:
      - httpApi:
          path: /drawings/{id}/segments/{segment}
          method: post
  s3ProcessUploadedSegment:
    handler: segments/processUploadedSegment.handler
    events:
      - s3:
          bucket: "${self:provider.environment.S3_SEGMENT_BUCKET}"
          event: s3:ObjectCreated:*
          existing: true
  s3ProcessUploadedDrawing:
    handler: segments/processUploadedDrawing.handler
    events:
      - s3:
          bucket: "${self:provider.environment.S3_DRAWING_BUCKET}"
          event: s3:ObjectCreated:*
          existing: true
  drawingsQueueReceiver:
    handler: segments/drawingsQueueReceiver.receive
    description: lambda function that subscribes to the drawings SQS queue
    runtime: python3.7
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - DrawingsQueue
              - Arn
resources:
  Resources:
    TodosDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
#      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
    SegmentsS3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: !Sub '${self:provider.environment.S3_SEGMENT_BUCKET}'
        AccessControl: Private
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders: [ '*' ]
              AllowedMethods: [ 'GET', 'PUT', 'POST' ]
              AllowedOrigins: [ '*' ]
    DrawingsQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: 'drawings-${sls:stage}'
    DrawingsS3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: !Sub '${self:provider.environment.S3_DRAWING_BUCKET}'
        AccessControl: Private
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders: [ '*' ]
              AllowedMethods: [ 'GET', 'PUT', 'POST' ]
              AllowedOrigins: [ '*' ]