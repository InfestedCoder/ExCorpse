service: exquisite-corpse
frameworkVersion: '3'

plugins:
  - serverless-dynamodb-local
  - serverless-s3-local
  - serverless-offline

custom:
  dynamodb:
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      migrate: true
    # Comment if you don't have a DynamoDB running locally
      noStart: true
    migration:
      dir: offline/migrations
  s3:
    host: localhost
    directory: ./tmp
    cors: offline/cors.xml
    allowMismatchedSignatures: true

provider:
  name: aws
  runtime: nodejs12.x
  environment:
    DYNAMODB_TABLE: drawings-${sls:stage}
    S3_SEGMENT_BUCKET: '${self:service}-segments'
  httpApi:
    cors: true
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"
        - Effect: Allow
          Action:
            - s3:GetObject
            - s3:PutObject
            - s3:PutObjectAcl
          Resource: "arn:aws:s3:::${self:provider.environment.S3_SEGMENT_BUCKET}/*"

functions:
  # =================================================================
  # TODO API
  # =================================================================
  create:
    handler: drawings/create.create
    events:
      - httpApi:
          path: /drawings
          method: post

  list:
    handler: drawings/list.list
    events:
      - httpApi:
          path: /drawings
          method: get

  get:
    handler: drawings/get.get
    events:
      - httpApi:
          path: /drawings/{id}
          method: get

  update:
    handler: drawings/update.update
    events:
      - httpApi:
          path: /drawings/{id}
          method: put

  delete:
    handler: drawings/delete.delete
    events:
      - httpApi:
          path: /drawings/{id}
          method: delete

  # =================================================================
  # Segment API
  # =================================================================
  initiate-upload:
    handler: segments/initiate-upload.initiate
    events:
      - httpApi:
          path: /drawings/{id}/segments/{segment}
          method: post
  s3ProcessUploadedSegment:
    handler: segments/processUploadedSegment.process
    events:
      - s3:
          bucket: "${self:provider.environment.S3_SEGMENT_BUCKET}"
          event: s3:ObjectCreated:*
          existing: true
resources:
  Resources:
    TodosDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
#      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
    SegmentsS3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: !Sub '${self:provider.environment.S3_SEGMENT_BUCKET}'
        AccessControl: Private
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders: [ '*' ]
              AllowedMethods: [ 'GET', 'PUT', 'POST' ]
              AllowedOrigins: [ '*' ]
